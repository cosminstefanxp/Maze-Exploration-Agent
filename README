Stefan-Dobrin Cosmin

Details:
The project represents designing a small artificial intelligence agent, that is supposed to explore a maze, find an artefact (goal) and then find the exit. The environment is non-deterministic and partially visibile. The agent only sees for a given number of cells, in any direction, and can go into traps, that will or will not blow up(non-deterministic). The agent has to explore the maze and decide where to go. The problem has been extended to allow for multiple agents in the same maze. If they meet, they will fight and only one of them will survive (depending on the remaining life-points).

The input data is given as an input file (details below). In the maze, besides walls, and free cells, there are some traps, that have a given probability of trigerring when the agent is crossing them. Also, there are some clue cells, that give a general idea regarding the direction of the clue.

Format of input file:
	----------------------------
	number_of_agents
	<for each agent, on a line>
	startX startY
	life_points
	fog_of_war_distance
	<end data regarding ag_ents>
	number_of_cells_on_the_map
	<for each cell, on a new line>
	cellX cellY typeOfCell [aux1]
	----------------------------
	o startX, startY, celulaX, celulaY - integer numbers, representing the coordinates of the cell
	o typeOfCell, integer:
		* 1 - artefact (goal cell)
		* 0 - free cell
		*-1 - wall/obstacle
		*-2 - trap (aux1 has to specify the probability of blowing up - numar float intre 0 si 1)
		* 2 - clue (aux1 has to specify direction - string: N, NE, SE, S, W, etc)
		* 3 - exit of the maze
	o whatever cell is not specified, is considered wall/obstacle
	
Implementation details:
	o there are 2 packages, one for graphics and one for logic
	o logic part is divided in 3:
		* ExplorationEngine - represents an agent and all the required logic
		* Map - represents all the info regarding the map, cells and all the info that is not under the control of the agent.
		* MainLauncher -entry point in the app. Agent battles are handled here.
	
